\documentclass[12pt]{article}
%\documentclass[14pt]{extarticle}
\usepackage[margin=3cm]{geometry}
\usepackage{graphicx}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{svg}
\usepackage{xspace}
\usepackage{color,colortbl}
\definecolor{code}{rgb}{ 0,0,0}
\newcommand\code[1]{\textcolor{code}{\texttt{#1}}\xspace}
\usepackage{stackengine}
\newsavebox\mybox
\newcommand\Includegraphics[2][]{\sbox{\mybox}{%
  \includegraphics[#1]{#2}}\abovebaseline[-.5\ht\mybox]{%
  \addstackgap{\usebox{\mybox}}}}


\title{Visualizing Mathematical Models,\\
2022 Mississippi Governor's School}

\author{\includegraphics[width=\textwidth]{mgs-2022.jpg}\\Dr.\ Jim\ Newton}
\setcounter{tocdepth}{2}
\setcounter{section}{-1}
\begin{document}


\maketitle
\sloppy

\pagebreak
\section{Introduction}

\subsection{Objectives}


You are a scholar participating in the 2022 Mississippi Governor's
School major course Advanced Mathematical Concepts, and Functional
Programming.  There are several objectives of this course:
\begin{description}
\item[Mathematics:] Ameliorate your love for Mathematics.
\item[Computer Science:] Develop competence in functional
  programming.
\item[Communication:] Explain and confidently defend your ideas.
\end{description}

The mathematical topics have been chosen to work complementary with an
introduction to functional programming. These topics will go hand in
hand, and learning each will go hand in hand with learning the other.
Along the way you will enforce what you've learned by explaining it to
your peers.

In this course you will learn many cursory things along the fast and
hectic journey.  It is critical that the leaders of tomorrow,
especially the leaders in the technology sector, understand the impact
on humans of technological development, especially decisions made in
haste under project pressure.  These aspects include knowing how to
apply abstract concepts to real computation problems, and how to
explain their ideas and defend their decisions to their peers.  You
are free to express you opinions and idea.

Don't forget that you are working not only with machines but also with
humans.  We will maintain a respectful, inclusive, and safe
environment.  Remember that different people have different strengths
and weaknesses.  Scientific discussions can sometimes become heated
and experts might disagree about the best course of action.  We'll
learn to keep disagreements objective and use science to test ideas,
rather than relying on emotions.  

Good ideas that are never explained die and are forgotten.  It is my
belief that you don't understand something until you can explain it.
After each unit, some students will present their solutions to their
peers.  This means defending your choices, recognizing strengths and
shortcomings, and being subjected to peer review (important in the
scientific process).  This exercise is intended not only to learn to
accept constructive criticism but also to build confidence.

\tableofcontents


\pagebreak
\subsection{Overview}

We will proceed through up to 6 units, perhaps fewer if we
decide to dig deeper into particular ones.  Each unit will be
organized into three stages
\begin{itemize}
\item Theory --- Learn mathematics and computer science concepts.
\item Lab --- Implement code relating to the theory and link it to
  previous units.
\item Presentation --- Present your work to your classmates, and
  defend your decisions.
  \end{itemize}


\noindent\includegraphics[height=4cm]{liebniz-newton.png}\footnote{
\url{https://stemfellowship.org/who-got-there-first-newton-leibniz-and-their-work-on-calculus/}
from Wikipedia.}\hfill
\includegraphics[height=4cm]{scala-programming.jpg}


We will primarily cover introductions to two mathematical areas: 
Abstract Algebra and Calculus.
Our practical treatment of Abstract
Algebra and Calculus will help you prepare for a more theoretical
treatment at the university level.
  
We will use a functional programming language called Scala,
\url{https://www.scala-lang.org}.  Functional languages are considered
by some to be more difficult than imperative languages, and students
rarely start programming using a functional language.  We have chosen this
approach, because the approach we will take will parallel many
mathematical concepts.  You will be able to take the things you've
learned and apply them back to other (more popular) programming
languages such as Python, Java Script, Lisp, C++, etc.


\pagebreak

\section{Functions}
\includegraphics[width=0.6\textwidth]{Function_machine2.png}

In this unit we will look at functions both from a mathematical
perspective and also from a programming perspective.  There are some
important similarities and some important differences.
\subsection{Mathematical perspective}

We would like to talk about functions.  But where should we start the conversation?

You may already have some intuition about functions.  Sometimes
functions have names, like $\sin$, $\cos$, and $\log$.  Sometimes
functions lack names but have formulas such as
$\frac{\frac{x+1}{x^2-1}+2}{x^2+1}$.

\subsubsection{Specifying functions}

What is a function? A function such as
\[f : X \to Y\]
is a correspondence beween two sets.  But it is a special
correspondence.  In particular the function~$f$ associates a unique,
well-determined, element of~$Y$ with each element of~$X$.


More
precisely, if $x\in X$, then~$f(x)$ designates a unique,
well-determined, element of~$Y$.
\[x \in S \implies f(x) \in Y\,.\]

\includegraphics[width=8cm]{Function_color_example_3.png}
\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=20802095}, By
\texttt{Function\_color\_example\_3.gif}: Wvbailey.
The original uploader was Wvbailey at English Wikipedia.derivative work: Zerodamage ---
This file was derived from: Function color example \texttt{3.gif}:, CC BY-SA 3.0.}


Conceptually, a function has three parts
\begin{enumerate}
\item A \emph{domain}, i.e., a place from which input values may be taken.
\item A \emph{range}, i.e., places where output values are found.
\item A \emph{rule}, i.e., a way of determining the output value given only the input value.
\end{enumerate}

To implement a function in the Scala programming language we have to
specify the \emph{domain} and \emph{range} in terms of what are called
\emph{types}, and we designate the \emph{rule} in terms of a
procedure.

\subsubsection{Mathematical notation}

\begin{align}
  f(x) &= 3x + 1 \label{eq.simple.1}
\end{align}


Let's start with a very simple function~\eqref{eq.simple.1}.
Actually, the only thing specified here is the rule.  This function is
written in a mathematical notation where the domain and range are not
specified.  The same notation can be used for different choices of
domain and range.  For example, this function works for integers,
$\mathbb{Z}$, as input, but it will also work for natural numbers,
$\mathbb{N}$, rational numbers, $\mathbb{Q}$, real numbers, $\mathbb{R}$,
complex numbers, $\mathbb{C}$.  The same function will also work for
matrices or for functions themselves.


If we want to be more precise, we can use a more descriptive notation as in~\eqref{eq.simple.2}

\begin{align}
  f:\mathbb{N}\to\mathbb{N}~\text{by}~ f(x) &= 3x + 1 \label{eq.simple.2}
\end{align}


The domain and range of a function need not be the same, and need not
be a set of simple numbers.  For example, we use the symbol
$\mathbb{R}^2$ to denote the set of ordered pairs of real numbers;
i.e.,
\[\{(x,y)\mid x\in \mathbb{R} \wedge y\in\mathbb{R}\}\,.\]
Equation~\eqref{eq.simple.3} shows an example of such a function.

\begin{align}
  f:\mathbb{R}^2\to\mathbb{R}~\text{by}~ f(x,y) &= 3x - 2y + 1 \label{eq.simple.3}
\end{align}

Mathematical notation such as $a+b$, $a\times b$, $a-b$, $a^3$, and
$\frac{\frac{x+1}{x^2-1}+2}{x^2+1}$, but we may also specify
functions using cases, like in Equation~\eqref{eq.simple.4}


\begin{equation}
  |x| = \begin{cases}
    x &\,; \text{if $x>0$}\\
    0 &\,; \text{if $x=0$}\\
    -x &\,; \text{if $x<0$}
  \end{cases}
\end{equation}\label{eq.simple.4}


\subsubsection{Specifying functions by recurrence}


Functions defined in terms of themselves

Inductive definitions.


We can define $x^n$ as
\[x^n = \underbrace{x \times x \times \ldots \times x}_{n~\text{times}}\]
or  we can define it recursively

\begin{equation}
  x^n = \begin{cases}
    1 &\,; \text{if $n=0$}\\
    x \times x^{n-1} &\,; \text{if $n > 0$}\\
    \frac{1}{x^{n}} &\,; \text{if $n < 0$}
  \end{cases}
\end{equation}\label{eq.slow.exponent}




We can define the factorial as
\[n! = 1 \times 2 \times \ldots \times n\]
or we can define it as
\begin{equation}
  n! = \begin{cases}
    1 &\,; \text{if $n=0$}\\
    n \times (n-1)! &\,; \text{if $n > 0$}
  \end{cases}
\end{equation}

The first case need not be $n=0$.  We can define the Fibonacci
numbers.  Let $F(n)$ denote the n'th Fibonacci number.


\begin{equation}
  F(n) = \begin{cases}
    1 &\,; \text{if $n=1$}\\
    1 &\,; \text{if $n=2$}\\
    F(n-1) + F(n-2)  &\,; \text{if $n > 2$}
  \end{cases}
\end{equation}



Likewise, we can define the set of subsets of size $n$

\begin{equation}
  \mathbb{P}_n(S) = \begin{cases}
    \{\emptyset\} &\,; \text{if $n=0$}\\
    \{   \{x\} \cup y ~\forall x \in S ~\forall y \in \mathbb{P}_{n-1}(S \setminus \{x\})  &\,; \text{if $n > 0$}
  \end{cases}
\end{equation}\label{eq.cases.1}

Notice that Equation~\eqref{eq.cases.1} specifies a function, not of
numbers, but of sets.  Its input is a set, and its output is a set of
sets.  I.e., the domain of $\mathbb{P}_n$ is a set of sets, and its
range is a set of set of sets.


\subsection{Programming perspective}

\begin{enumerate}
\item Programming languages, functional, imperative

\item Create github account

\item Open the development environment

\item Scala and IDE, define simple functions in Scala, run, edit, test, debug in IntelliJ.

\item Defining a function
  
\item Types, atomic types: (\code{Double}, \code{Int}, \code{Boolean},
  \code{String}), and operations on objects of these types.

\item Conditionals, pattern matching

\item Recursive functions

\item \code{Tuple}: create and destructure.
  
\item Container types: \code{List[]}, \code{Vector[]}, \code{Seq},
  \code{Set[]}, \code{Map[]}, \code{Option[]}

\item \code{for}, \code{forall}, \code{exists}, \code{contains}, \code{find}  methods.
  
\item We
  implement the \code{fixedSizedSubsets} in live-coding.  We write
  some tests.  Some of which pass, and some of which fail.  To compute
  the number of subsets of size $k$ of a set of size $n$ we need to
  compute~$n \choose k$ using the \code{factorial} function, which you
  will develop.

\item Testing
  
\item Version control, branch, pull
\end{enumerate}

\subsection{Coding}

\begin{enumerate}
\item First Program
  \begin{itemize}
  \item Create a github account
  \item Open \url{https://github.com/jimka2001/mgs-2022} with your web browser.
  \item Fork the repository.
  \item Open the web-ide with gitpod, you may just prepend
    \url{http://gitpod.io/#} to the URL already in the web browser.
  \item Find the Explorer, and open (click) \texttt{src/main/scala/SetsAndFunctions.scala}.
    If you click on \code{SetsAndFunctions} you should see something like this:

    \includegraphics[height=1.5cm]{rundebug.png}

    Click \textbf{run}.  If you don't see \textbf{run debug}, you may
    need to restart the build server, and recompile.  Find and click
    the Metals icon \includegraphics[height=2cm]{metals.png}.  This
    should open the Metals panel where you can \textbf{Restart the
      build Server} and \textbf{Cascade compile}. 

    \includegraphics[width=8cm]{buildserver.png}

    Thereafter, you should be able to find the \textbf{run|debug} link
    in the Scala code.
    
  \item Find the function \code{quadraticFormula}, implement a test
    for this function.

    \[\frac{-b \pm \sqrt{b^2 - 4ac}}{2a}\]
    The test should go in the file \texttt{SetsAndFunctionsTestSuite.scala} in
    directory \texttt{src/test/scala/}.  There is
    already a function stub you can use.  Extend the tests.  Remember
    that to test values of type \code{Double} you may need check
    whether the absolute value is less than epsilon rather than
    testing for exact equivalence.
  \item Enhance \code{quadraticFormula}: Notice that the current
    implementation is inefficient, because it computes almost the same
    thing twice.  Also if you call the function with \code{a,b,c} for
    which there are no real solutions, the function will return
    \code{NaN,NaN}. What is \code{NaN}?  If you don't know, look it up
    with an internet search.  You should refactor the function to
    define a variable \code{discriminant} whose value is
    \[\Delta = b^2 - 4 a c\,.\]
    Then there are three cases, if $\Delta < 0$, if $\Delta = 0$, and
    if $\Delta > 0$. Refactor the function so that if there are no
    real roots it returns an empty list; if there is a unique 
    solution, return a list of one number; and if there are two
    distinct solutions, return a list of those two solutions
    \textbf{in increasing order}.  I.e., if you return \code{(a,b)}
    assure that $a < b$.  Also update the test case to check for
    $a<b$.
  \end{itemize}
\item Recursive Functions
  \begin{itemize}
  \item Implement \code{power} for \code{Int} and \code{Double}.  In
    the case of \code{Double} you should also handle the case of a
    negative exponent.
  \item Implement \code{String} concatenation using the power model.
  \item Implement \code{List} concatenation using the power model.
  \item Implement \code{factorial}.
  \item Use \code{factorial} to test n-sized subsets.  We develop the
    n-sized subsets function in class.

    \textbf{Discussion:} Do we
    need a case for $n=0$ and also $n=1$?  How does this relate to the
    principle of induction?  Look up \emph{Principle of Induction} if
    you need to review it.
  \item Implement Fibonacci.
  \end{itemize}
\end{enumerate}


\pagebreak
\section{Abstract Algebra}


\includegraphics[width=\textwidth]{galois.png}




In this unit we will study sets with mathematical structure.
There are several mathematical structures defined by axioms.

We will thereafter write programs as individuals and as teams to
manipulate these structures.

\subsection{Mathematical perspective}


\subsubsection{Monoid}
$(S,\circ)$ is a monoid if
\begin{enumerate}
\item Closure: $a,b \in S \implies a\circ b \in S$.
\item Associative: $a,b,c \in S \implies (a\circ b) \circ c = a \circ (b \circ c)$
\item Identity: $\exists e\in S$ such that $a\in S \implies a\circ e = e\circ a = a$
\end{enumerate}

\noindent Notice that we assume that a monoid has an identity element, but we
don't assume that it is unique.  Can a monoid have more than one
identity element: $e_1$ and $e_2$?  The answer is no, but why?  


\subsubsection{Group}

$(S,\circ)$ is a group if
\begin{enumerate}
\item $(S,\circ)$ is a monoid.
\item Inverse: $\forall a\in S~\exists a^{-1}\in S$ such that $a\circ a^{-1} = a^{-1} \circ a = e$
\end{enumerate}
If $a\circ b = b\circ a$ for all $a,b\in S$, then we call S and Abelian group.

A group has an identity which is also the identity of the monoid,
which we already know to be unique.  But we can ask a similar
uniqueness question about the inverse.  Can an element $a\in S$ have
two different inverses?  No, but why?

\subsubsection{Ring}

$(S,+,\times)$ is a ring if
\begin{enumerate}
\item $(S,+)$ is an Abelian group.
\item $(S,\times)$ is a monoid.
\item Distributive: $a,b,c  \in S \implies a\times(b+c)=(a\times b)+(a\times c)$.
\end{enumerate}    

\noindent In the special case that $(S,\times)$ is commutative, $(S,+,\times)$ is called an Abelian ring.

\subsubsection{Field}

$(F,+,\times)$ is a field if
\begin{enumerate}
\item $(F,+, \times)$ is an Abelian Ring.
\item $(F \setminus 0, \times)$ is a group, where $0$ is the identity under $+$.
\end{enumerate}    


\includegraphics[width=8cm]{Algebraic-structures-magma-to-group.png}\footnote{\url{https://en.wikipedia.org/wiki/Monoid#/media/File:Magma_to_group4.svg} by Ethaniel, Wikipedia.}




\subsubsection{Vector Space (optional)}

\textbf{Question:} What is a vector?

\textbf{Answer:} An element of a vector space.

It turns out we don't define vectors by themselves, rather we define a
set with a particular structure, and then call the elements
\emph{vectors}.

$(G,F,+,\times,\circ)$ is a vector space if
\begin{enumerate}
\item $(G,+)$ is an Abelian group.
\item $(F,+,\cdot)$ is a field.
\item $a,b\in F$ and $v\in G$, we have $(a + b)\circ v = a\circ v + b\circ v$.
\item $a\in F$ and $u,v\in G$, we have $a\circ (u + v) = (a\circ v) + (a\circ v)$.
\item $a,b\in F$ and $v\in G$, we have $(a\cdot b)\circ v = a\circ (b \circ v)$.
\end{enumerate}    
Elements of $G$ are called vectors.  Elements of $F$ are called
scalars. And $\circ$ (normally written as juxtaposition, $a v$ rather than $a\circ v$) is
called scalar multiplication.


\subsubsection{Fast Exponentiation in a Monoid}

Recall the definition of exponentiation in
Equation~\eqref{eq.slow.exponent}.  In any monoid with operation $\circ$ and identity
element $e$, we can compute an
integer power of an element more efficiently according to the
following formula.



\begin{equation}
  x^n = \begin{cases}
    e &\,; \text{if $n=0$}\\
    x &\,; \text{if $n=1$}\\
    x \circ x^{n-1} &\,; \text{if $n$ is odd}\\
    (x^\frac{n}{2})\circ     (x^\frac{n}{2}) &\,; \text{if $n$ is even}\\
  \end{cases}
\end{equation}\label{eq.fast.exponent}


\subsubsection{Equivalence classes}

Equivalence classes and groups of equivalence classes.

\subsubsection{Review}
Review  definitions: associative, commutative, Abelian,
distributive, closure, identity, vector, scalar, scalar
multiplication, juxtaposition.

Fuzzy definitions: zero, one, add, multiply
  


\subsection{Programming perspective}
\begin{enumerate}
\item Monoid
  \begin{itemize}
  \item \code{String} concatenation
  \item \code{List[Int]} concatenation
  \item \code{Set[Int]} union
  \item \code{Seq[Int]}
  \item (optional Monoid of function application \code{compose})
  \end{itemize}
\item Multiple dimensional types
  \begin{itemize}
  \item  \code{Seq[Seq[Int]]},  \code{Seq[Seq[Double]]}
  \item Implement matrix using.  We implement \code{matrixIdentity}, \code{matrixAdd},
    \code{matrixScale}, \code{matrixMultiply} using concentric loops.
  \item Then refactor to move the concentric loops into single function, \code{matrixTabulate}.
  \item Ring of matrix (matrix add, subtract, multiply)
  \end{itemize}
\item The \code{Map[]} type
  \begin{itemize}
  \item \code{Map[Int,Int]}, creating, manipulating
  \item Equivalence classes using \code{groupBy}.
  \item Implement polynomial using \code{Map[Int,Double]}
  \item Ring of polynomials (polynomial add, scale, subtract, multiply)
  \item \code{almostEqual} comparing floating point
  \end{itemize}
\item Testing
  \begin{itemize}
  \item Testing with \code{main}
  \item Debugging with print
  \item Property based testing
  \item Generating randomly selected object.
  \end{itemize}
\item Team work
  \begin{itemize}
  \item   pojects using git and github
  \item pull request
  \item merge and rebase
\end{itemize}

\end{enumerate}

\subsection{Coding}
\begin{enumerate}
\item The \code{Map[]} type.  Partition a sequence into equivalence classes in several ways.
  \begin{itemize}
  \item Group strings by length of string (size).
  \item Group sets of integers by minimum element.
  \item Partition a set of natural numbers between to boundaries
    \code{lower} and \code{upper} into equivalence classes modulo \code{n}.
  \end{itemize}
  
\item Square matrices of integers
  \begin{itemize}
  \item Implement matrix, add, subtract, multiply multiplication, in
    functions \code{matrixAdd}, \code{matrixSubtract}, and
    \code{matrixMultiple}.
  \item Implement fast monoid multiply for matrices:
    \code{matrixPower}.  In the test case, multiply the slow way and
    assert that the result is the same as \code{matrixPower}.
  \item Complex numbers as special case of $2\times 2$ matrix.
    Implement \code{complexAdd}, \code{complexSubtract},
    \code{complexMultiply} in terms of \code{matrixAdd},
    \code{matrixSubtract}, and \code{matrixMultiple}.
  \item Can you express the identity $i^2 = -1$ in terms of these
    $2\times 2$ matrices?  Write this as a test case for
    \code{complexMultiply}
  \item Test structural axioms (commutativity etc), Property based
    testing.  You'll need a function to generate a random $n\times n$
    matrix.

    
  \end{itemize}

    \textbf{Discussion:} in which cases regarding matrices and complex
    numbers can we check associativity and commutativity?  Is matrix
    addition commutative?  Is matrix multiplication commutative?  Is
    complex multiplication commutative?

    \textbf{Discussion:}    If matrix multiplication is not commutative, but complex
    multiplication is, how can we implement complex numbers in terms
    of matrices?

  
\item Team Project
  \begin{itemize}
  \item Implement functions to detect monoid, group,
    ring, and field given a finite set, and the $+$ and $\cdot$
    operations.
  \item When finished with your function, commit, push, and send a
    pull request.
  \item To test your code, you will need to pull the changes in the
    repository.
  \item Define $\mathbb{Z}/n$, the integers modulo $n$. Is it a
    monoid? Is it a group (Abelian)? etc. \ldots
  \item For which values of $n$ is $\mathbb{Z}/n$ a field?
  \end{itemize}
  
\item Group Interactive Project
  \begin{itemize}
  \item Implement the polynomial ring, with addition,
    subtraction, multiplication
  \item Generalize to the polynomial ring over a given field.
  \item Consider the set of polynomials of degree $n$ whose scalars
    are the field $\mathbb{Z}/p$.  Demonstrate addition, subtraction,
    and multiplication.

    
  \end{itemize}
    \textbf{Discussion:} Is the set of polynomials of degree $n$ with
    integer coefficients an infinite
    set or finite set?  Is this set closed under addition?  Are
    multiplication and addition associative and commutative? Is it
    closed under multiplication?  Does this set form a monoid, group,
    ring, or field?

    How does the answer change if addition and multiplication of
    coefficients is done in $\mathbb{Z}/(n+1)$.

    What if arithmetic on not only coefficients but also exponents is
    done in $\mathbb{Z}/(n+1)$.
    
    What would you need to do to use the library you've written
    \code{isMonoid}, \code{isGroup} etc to test your hypotheses?  How
    would you write a program to generate all such polynomials?

    \textbf{Discussion:} Is the set of $n\times n$ matricies with
    integer content a finite or infinite set?  What if we restrict the
    content to $\mathbb{Z}/(n+1)$?  How would you need to change the
    matrix manipulation code you've already written to accomodate
    arithmetic in $\mathbb{Z}/(n+1)$?
  


\end{enumerate}


  
\pagebreak\section{Convergence}

In this section we will talk about a characteristic property/attribute
which distinguishes the rational numbers, $\mathbb{Q}$, from the real
numbers, $\mathbb{R}$.  That important feature of $\mathbb{R}$ not
shared by $\mathbb{Q}$ is \emph{convergence}.  But what do we mean by
convergence?

We will discuss the mathematical definition of convergence, and we
will write some programs which approximate real quantities with
sequences which approximate them.

Isaac Newton and Gottfried Leibniz invented calculus around 1660 or
1670.  Some 150 years later, around 1820 Augustin-Louis Cauchy and Bernard Bolzano
presented the concept of the limit.  Thanks to the work of Cauchy and Bolzano and
his contemporaries, we can understand at a fundamental level, the work
of Newton and Leibniz.

\noindent\includegraphics[width=0.48\textwidth]{bolzano.jpg}\footnote{Bernard Bolzano}~\includegraphics[width=0.48\textwidth]{cauchy.jpg}\footnote{Augustin-Louis Cauchy}



\subsection{Mathematical perspective}

In the previous sections we talked
about the natural numbers, $\mathbb{N}$, the integers, $\mathbb{Z}$,
the rationals, and $\mathbb{Q}$.  In particular we talked about what
distinguishes them from each other.

In an intuitive sense:
\begin{itemize}
  \item $\mathbb{N}$ is a set where we can add and
multiply; \item $\mathbb{Z}$ is a set where we can add, subtract, and
multiply; and \item $\mathbb{Q}$ is a set where we can add, subtract,
multiply, and divide.
\end{itemize}

Unfortunately, we don't have a good example of \textbf{numbers} where
we can add but not multiply; however, we saw examples of so-called
monoids such as simple sets where the union operation is associative,
the empty set, $\emptyset$, is the identity element, but there is no
inverse operation of union, and nothing like multiplication.  So we
might say a set is somewhere which allows associative addition, but
not subtraction and not multiplication.



\subsubsection{Intuition of  convergence?}

Look at the following image.  It is easy to convince yourself that the
circumference of the indicated circle with integer radius is a fixed
quantity.  I.e., it is not an vague, indefinite concept, but the
circumference of a circle has a real, actual, definite length.


\noindent\includegraphics[width=\textwidth]{Archimedes-pi.png}
\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=1250248}. By
Original: FredrikVector: Leszek Krupinski --- Own work based on:
Archimedes pi.png:  by Fredrik, Public Domain.}


The
length of the circumference of the circle is always greater than the
length of the perimeter of an inscribed polygon, and is always less
than the length of the perimeter of a circumscribed polygon.
Moreover, we have a decreasing sequence of numbers and an increasing
sequence of numbers which grow arbitrarily close together.  I.e.,
choose any small number, $\varepsilon$.  Now find a sufficiently large
n such that the perimeter of the circumscribed polygon is within
$\varepsilon$ of the perimeter of the inscribed polygon.  The
sandwiched value is the circumference of the circle.

The real numbers, $\mathbb{R}$, is the smallest set which contains all these numbers.
\[\mathbb{Q} \subset \mathbb{R}\]
\[\mathbb{R} \not\subset \mathbb{Q}\]


As another example, using infinite sums which we will talk about in a
later unit, consider the sequence: $(a_0, a_1, a_2, \ldots)$, such
that $a_n$ is defined as:
\[a_n = \sum_{k=0}^{n}\frac{8}{(4n+1)(4n+3)}\]

This sequence is discussed on wikipedia.\footnote{Leibniz formula,
\url{https://en.wikipedia.org/wiki/Leibniz_formula_for_pi}}.  This is
a sequence of rational numbers; each numerator is an integer, namely
8, and each denominator is an integer.  The successive rational
numbers, $a_n$ and $a_{n+1}$ may be made as close as you like by
choosing sufficiently large $n$.  Thus this sequence is Cauchy.
Nevertheless, the value this sequence tends to is not rational.  Any
rational number, $q$, you chose, you can find an $N$ such that if
$n>N$ then either $a_n>q$ or $a_n<q$.  Thus we say that this sequence
does not converge in $\mathbb{Q}$.  However, it converges to in
$\mathbb{R}$.  In particular
\[a_n \to \pi\,.\]



\subsubsection{The limit of a sequence}
The limit is the most fundamental concept in
Calculus.
\[\lim_{n\to\infty} a_n = a\]
means that $\forall~\varepsilon > 0~ \exists~ N\in\mathbb{N}$ such
that if $n>N$ then $|a_n - a| < \varepsilon$.


A sequence $\lbrace a\rbrace_n$ converges to $a$, written $a_n\to a$,
if \[\lim_{n\to\infty} a_n = a\,.\]
  

A sequence is $\lbrace a\rbrace_n$ is said to be Cauchy, if
$\forall~\varepsilon > 0~ \exists~ N\in\mathbb{N}$
such that if $n>N$ and $m>N$ then $|a_n - a_m| < \varepsilon$.

\includegraphics[width=9cm]{Folgenglieder_im_KOSY.png}\footnote{By
Ceranilo, CC BY-SA 4.0,
https://commons.wikimedia.org/w/index.php?curid=54837240}
\\Example of a sequence which converges to the limit $a$.

\includegraphics[width=9cm]{Epsilonschlauch.png}\footnote{By
Ceranilo, CC BY-SA 4.0,
https://commons.wikimedia.org/w/index.php?curid=54836520}
\\Regardless which $\varepsilon >0$ we have, there is an index
$N_0$, so that the sequence lies afterwards completely in the
epsilon tube $(a-\varepsilon ,a+\varepsilon)$.


\includegraphics[width=9cm]{Epsilonschlauch-klein.png}\footnote{By
Ceranilo, CC BY-SA 4.0,
https://commons.wikimedia.org/w/index.php?curid=54836607} \\There
is also for a smaller $\varepsilon_{1}>0$, an index $N_{1}$, so
that the sequence is afterwards inside the epsilon tube
$(a-\varepsilon_{1},a+\varepsilon_{1})$.

  
\subsection{Programming perspective}
  \begin{enumerate}
  \item tail recursion,
  \item fixed point
  \item higher order functions
  \item function type
  \item representing finite and infinite sequences.
  \item sequence functions: \code{map}, \code{filter}, \code{max}, \code{sum}, \code{head}, \code{tail}, 
  \item \code{for} comprehension
  \end{enumerate}

\subsection{Coding}
\begin{enumerate}
\item Exponentiation
  \begin{itemize}
  \item Implement exponentiation of Double as a recursive function.
  \item Generalize to implement exponentiation on a monoid
  \item Implement matrix exponentiation.
  \item Implement polynomial exponentiation.
  \end{itemize}  
\item Sequences
  \begin{itemize}
  \item Define a lazy sequence \[a_n =
    \sum_{k=0}^{n}\frac{8}{(4n+1)(4n+3)}\,.\] Given $n$, compute the sequence of
    $n+1$ numbers, and use the \code{sum} method to add them up. (We will
    discuss a better way tomorrow).
  \item Compute the same sums using normal recursion and tail recursion.
  \item Convince yourself that $\{a_n\}$ is strictly increasing; i.e.,
    $a_n < a_{n+1}$.  Can you show this empirically? Can you prove
    this mathematically?
  \item However, the sequence of successive
    differences is decreasing: if $d_n = a_{n+1} - a_n$ then the
    sequence $\{d_n\}$ is decreasing: $d_n > d_{n+1}$.  Show this
    empirically and mathematically.
  \end{itemize}
\item Convergence
  \begin{itemize}
  \item Now implement a function such that given $\varepsilon$, find and
    return $N$, such that \[n>N \implies |a_n - \pi| < \varepsilon\,.\]
  \item Detect Cauchy of sequences.
  \end{itemize}  
  
\end{enumerate}





\pagebreak\section{Infinite sums}

In this section we'll look at ways to compute sums like these
\begin{align}
  \exp(x) &= \sum_{k=0}^{\infty} \frac{x^k}{k!}\\
  \sin(x) &= \sum_{k=0}^{\infty} \frac{{(-1)}^{k}x^{2k+1}}{(2k+1)!}\\
  \cos(x) &= \sum_{k=0}^{\infty} \frac{{(-1)}^{k}x^{2k}}{(2k)!} \\
  \ln(1+x) &= \sum_{k=1}^{\infty} \frac{{(-1)}^{k-1}x^{k}}{k}\,.
\end{align}


\subsection{Mathematical perspective}
  \begin{enumerate}
  \item Review functions $\sin$, $\cos$, $\exp$, and $\ln$.
    \includegraphics[width=9cm]{sin-cos.png}\footnote{
    \url{https://commons.wikimedia.org/w/index.php?curid=57551646} By Stephan Kulla
    (User:Stephan Kulla) --- Own work, CC0.}
  \item Contrast convergence and summability.
  \item Taylor series is of the form
    \[\sum_{k=0}^{\infty} a_{n}x^{n}\,.\]
    In some cases this series converges to an interesting function.
    Since the $x^n$ terms are increasing rapidly, the $a_n$ terms must
    therefore decrease (in absolute value) rapidly otherwise the
    series will not converge (it will diverge).

\includegraphics[width=10cm]{sintay.png}\footnote{By IkamusumeFan ---
Own work, CC BY-SA 3.0,
\url{https://commons.wikimedia.org/w/index.php?curid=27865201}} 

    As the degree of the Taylor polynomial rises, it approaches the
    correct function.  This image shows $\sin x$ and its Taylor
    approximations by polynomials of degree 1, 3, 5, 7, 9, 11, and 13
    at $x = 0$.

  \end{enumerate}
  
\subsection{Programming perspective}
  \begin{enumerate}
  \item \code{Option[]}
  \item folding:  \code{foldLeft},  \code{reduce}, \code{reduceOption}
  \item \code{Either[]}
  \item Introduce \code{foldM}
  \end{enumerate}

\subsection{Coding}
\begin{enumerate}
\item Reimplement factorial using \code{foldLeft}.
\item Implement the $\sin$, $\cos$, and $\exp$ functions in terms
  of the infinite Taylor series, understand conditions of convergence, avoiding infinite loops.
\item Improve convergence using shifting and scaling.
\item Compute $\sin$ and $\cos$ of square matrices.
\item Determine experimentally the value of $\cos^2(M) + \sin^2(M)$ for a square matrix $M$.
\item Can you find other trigonometric identities which have an analog
  in the world of trigonometry on matrices?  Can you find identities
  on the real numbers which don't correspond to matrices?
\item Compute $\sin$ and $\cos$ of complex numbers using $2\times 2$ matrix
  
\end{enumerate}


\pagebreak\section{Differential Calculus}


\subsection{Mathematical perspective} --- We start our discussion of the derivative by talking about the limit.
  We saw the limit already in terms of sequences.  Now we look at a slightly different concept,
  and extension, of the limit in terms of a function of a single variable.
  We will thereafter, define the derivative in terms of the limit.  Additionally, we will follow the same
  model programmatically, by defining a function to estimate the limit, then to implement a function to estimate the derivative using the limit function.
  
  \begin{enumerate}
  \item Intuition of limit.  Consider the function:
    \[f(x) = \frac{x-1}{x^2-1}\,.\]
    We cannot evaluate this function at $x=1$; however if we take
    values of $x$ close to $1$, the function evaluates just fine, and
    is well-behaved.  Take a sequence of values approaching 1, and ask
    yourself what value does $f(x)$ approach?

    It turns out that any sequence $a_n \to 1$ (except those for which $a_k = 1$ for some $k$) corresponds
    to a convergent sequence $f(a_n) \to \frac{1}{2}$.

    Another way of phrasing this intuition is that we can make
    $\frac{x-1}{x^2-1}$ close to $\frac{1}{2}$ by making $x$ close to
    $1$.  But that statement is a vague.  We can make the statement
    more precise by saying that we can make $\frac{x-1}{x^2-1}$
    arbitrarily close to $\frac{1}{2}$ by making $x$ sufficiently
    close to $1$.

  \item Definition of limit
    \includegraphics[width=8cm]{limit.png}\footnote{By User:HiTe --- Own
    work, Public Domain,
    \url{https://commons.wikimedgia.org/w/index.php?curid=2314281}}.

  What does this notation mean? \[\lim_{x\to a}f(x) = L\]
  It means that: $\forall \varepsilon > 0~\exists \delta > 0$ such that
  \[|x - a| < \delta \implies |f(x) - f(a)| < \varepsilon\,.\]
  

  Using the language we used above: the limit of a function $f$ at $a$
  is $L$ means that we can make the value of $f$ arbitrarily close to
  $L$ by making its argument sufficiently close to $a$.

  \item Intuition of derivative

\noindent\begin{tabular}{lp{3cm}}
\Includegraphics[width=9cm]{Secant-calculus.png}\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=4369993} By derivative work: Pbroks13 (talk) \texttt{Secant-calculus.png}: Shizhao --- \texttt{Secant-calculus.png}, CC BY-SA 3.0, }
&The secant to curve $y= f(x)$ determined by points $(x, f(x))$ and $(x + h, f(x + h))$.\\
\Includegraphics[width=9cm]{Lim-secant.png}\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=4370022} By derivative work: Pbroks13 (talk) \texttt{Lim-secant.png}: The original uploader was CSTAR at English Wikipedia. --- \texttt{Lim-secant.png}, CC BY-SA 3.0.}
&The tangent line as limit of secants.\\
\Includegraphics[width=9cm]{Tangent-calculus.png}\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=4369975} By derivative work: Pbroks13 (talk) \texttt{Tangent-calculus.png}: Rhythm --- \texttt{Tangent-calculus.png}, CC BY-SA 3.0.}
&The tangent line at $(x, f(x))$.
\end{tabular}


    Again we can generate a sequence of values (of $h\to 0$)
    approaching 0, and from that we can generate a sequence of values
    of the slope of $f$, i.e., $\frac{f(x+h)-f(x)}{h}$.  Does this
    sequence of slopes converge when the sequence of $h$ values
    converges to $0$?


    If $h \to 0$ then does $\frac{f(x+h)-f(x)}{h}$ approach some
    value?  The value may very well be different for each $x$.  If so
    that set of values is therefore a function of $x$, which leads to
    the definition of the derivative.
    

\item Definition of derivative
  \[f'(x) = \lim_{h\to 0}\frac{f(x+h) - f(x)}{h} = \lim_{a\to x}\frac{f(x) - f(a)}{x - a}\,.\]
\noindent\includegraphics[width=10cm]{derivative.png}\footnote{\url{https://betterexplained.com/articles/calculus-building-intuition-for-the-derivative} From web page.}


\item Linearity of derivative.
  \[f(x) = h(x) + g(x) \implies f'(x) = h'(x) + g'(x)\,,\]
  and \[f(x) = \alpha h(x) \implies f'(x) = \alpha h'(x)\,.\]

\item Product rule
  \[f(x) = h(x)g(x) \implies f'(x) = f(x)g'(x) + f'(x)g(x)\,.\]
\item Derivative of polynomial using induction and product rule.
  \[f(x) = x^n \implies f'(x) = n x^{n-1}\,.\]
\item Thus we can compute the derivative of any polynomial:
  If \[f(x) = \sum_{k=0}^{n} a_n x^k\,,\] then \[f'(x) = \sum_{k=0}^{n} k a_n  x^{k-1}\,.\]

  \end{enumerate}
  
\subsection{Programming perspective}
  \begin{enumerate}
  \item Definition of derivative in terms of limit,
  \item Derivative of polynomial
  \end{enumerate}


\subsection{Coding}
\begin{enumerate}
\item Implement the \code{limit} function as a function which
  manipulates functions.
\item Use the \code{limit} function to evaluate    \[\lim_{x\to 1}\frac{x-1}{x^2-1}\,.\]
\item Compute derivative by successive approximation using
the previous implementation of limit.
\item Compute exact derivative of a polynomial
\item Compare two approaches numerically.
\item Compute $\cos$ in terms of derivative of $\sin$,
\item Compare to Taylor series computation.

\end{enumerate}


\pagebreak\section{Integral Calculus [Optional]}
\includegraphics[width=\textwidth]{integral.png}\footnote{\url{https://www.mathtutordvd.com/public/How-Isaac-Newton-Changed-the-World-with-the-Invention-of-Calculus.cfm}From the web page }


\subsection{Mathematical perspective}
  \begin{enumerate}
  \item The notation and intuition of the integral.
    
  \item Understanding the Riemann sums in terms of infinite
    sums of rectangles.

  \item Integral of polynomial:
    \[\int x^n~dx = \frac{1}{n+1}x^{n+1}\]
    So by linearity,
    \begin{align}
      \int \sum_{k=0}^{n}a_k x^n~dx &= \sum_{k=0}^{n} \int a_k x^n~dx\\
      & = \sum_{k=0}^{n} a_k \int x^n~dx\\
      &= \sum_{k=0}^{n} \frac{a_k}{n+1} x^{n+1}\,.
    \end{align}
    
  \item Fundamental Theorem of Calculus:

  \begin{itemize}
  \item The derivative of the integral is the function.
    \begin{align}
      F(x) = \int_a^x f(t)dt &\implies F'(x) = f(x)\\
      \frac{d}{dx} \int_a^x f(t)dt &= f(x)\,.
    \end{align}
  \item The integral of the derivative is the function.
    \begin{align}
      F'(x) = f(x) & \implies \int_a^b f(x) dx = F(b) - F(a)\\
    \int_a^x f'(t)dt & = f(x) - f(a)\,.
    \end{align}
  \end{itemize}

  \end{enumerate}
  
\subsection{Programming perspective}
  \begin{enumerate}
  \item Expressing limit of sum of rectangles

    \includegraphics[width=12cm]{Riemann-sum-convergence.png}
\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=2347919} By I, KSmrq, CC BY-SA 3.0.}


\item Expressing limit of sum of trapezoids
  
\includegraphics[width=8cm]{Integration-num-trapezes-notation.png}
\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=8541370} By Scalerderivative work: Cdang (talk), CC BY-SA 3.0.}

  \end{enumerate}



\subsection{Coding}
\begin{enumerate}
\item  Implement integral (function of function) using
  limit, sum of rectangles, and sum of trapezoids.
  Which converges faster?
\item Compute area under line, and show experimentally that it grows quadratically.
\item Compute area under parabola, and show experimentally that it grows cubically.
\item Compute area of a circle by integrating $\sqrt{1 - x^2}$. I.e., compute
  \[2\int_{-1}^{1}\sqrt{1 - x^2}~dx\,.\]
\item Compute explicit integral of polynomial
\item Verify the fundamental theorem of calculus experimentally.
\end{enumerate}


\end{document}



% LocalWords:  EPITA priori epita www luke edu Sentier Etroites Issy
% LocalWords:  Moulineaux gmail les des GitHub IDE GitKraken IntelliJ
% LocalWords:  gitkraken dev MUW GitLab Collaboratory msstate cse com
% LocalWords:  HDMI Lethbridge https uleth ca jpg Programmatic meetup
% LocalWords:  BucharestJS ozassignments png colorized jnewton jimka
% LocalWords:  issy pastpresentfuture thispublicdiary illinois pdf CC
% LocalWords:  NevadaClassClose techservices teamwork MCCRS MDE usna
% LocalWords:  SEC OAE org mdek xkcd lrde mgs Modularity Scala monoid
% LocalWords:  invertability Scalerderivative SA wikimedia php curid
% LocalWords:  trapezes num Folgenglieder KSmrq Pbroks Lim Shizhao en
% LocalWords:  CSTAR IkamusumeFan Epsilonschlauch Ceranilo github svg
% LocalWords:  Abelian magma surjective surjection mathsisfun html
% LocalWords:  Ethaniel wikipedia wiki Int forall Fredrik Krupinski
% LocalWords:  FredrikVector Leszek sintay summability foldLeft foldM
% LocalWords:  klein Leibniz uploader reduceOption groupBy pagebreak
% LocalWords:  leibniz hfill scala includegraphics noindent url ldots
% LocalWords:  setminus exp internet quadraticFormula NaN destructure
% LocalWords:  fixedSizedSubsets SetsAndFunctions buildserver galois
% LocalWords:  SetsAndFunctionsTestSuite Monoid Cdang cubically cfm
% LocalWords:  mathtutordvd betterexplained programmatically Bolzano
% LocalWords:  Augustin Gottfried matrixMultiple complexAdd rundebug
% LocalWords:  complexSubtract
